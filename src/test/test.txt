/***************************************************************************
 * The contents of this file were generated with Amplify Studio.           *
 * Please refrain from making any modifications to this file.              *
 * Any changes to this file will be overwritten when running amplify pull. *
 **************************************************************************/

/* eslint-disable */
import '../components/Universities.css'
import * as React from "react";
import { useState } from 'react';
import { UniItem } from "../models";
import {
  getOverrideProps,
  useDataStoreBinding,
} from "@aws-amplify/ui-react/internal";
import ActionCard from "./ActionCard";
import { Collection } from "@aws-amplify/ui-react";


function Filter({ title, info }) {
  const [isRotated, setIsRotated] = useState(false);

  const handleButtonClick = () => {
    setIsRotated(!isRotated);
  };

  return (
    <div className='uni__filter__container'>
      <div className='filter__title'>
        <button className={isRotated ? 'rotate' : ''} onClick={handleButtonClick}>
          <span>{title}</span>
          <img id="green_arrow" src="images/arrow.png" alt="arrow greater than" style={{ transform: isRotated ? 'rotate(90deg)' : 'rotate(0deg)' }}/>
        </button>
      </div>
      {isRotated && (
        <div className='filter__info'>
          {info}
        </div>
      )}
    </div>
  );
}


export default function UnisCardCollection(props) {

  

  const { items: itemsProp, overrideItems, overrides, ...rest } = props;
  const [items, setItems] = React.useState(undefined);
  const itemsDataStore = useDataStoreBinding({
    type: "collection",
    model: UniItem,
  }).items;
  // React.useEffect(() => {
  //   if (itemsProp !== undefined) {
  //     setItems(itemsProp);
  //     return;
  //   }
  //   setItems(itemsDataStore);
  // }, [itemsProp, itemsDataStore]);

  // const [location, setLocation] = React.useState("");
  const [locations, setLocations] = React.useState([]);
  const [tuitionFee, setTuitionFee] = React.useState(0);

  /* SORT a-z z-a */
  const [sortBy, setSortBy] = useState('');

  const handleSortChange = (event) => {
    setSortBy(event.target.value);
  };

  React.useEffect(() => {
    let filteredItems = itemsProp !== undefined ? itemsProp : itemsDataStore;

    // Apply location filter
    if (locations.length > 0) {
      filteredItems = filteredItems.filter(item =>
        locations.includes(item.location)
      );
    }

    // Apply tuition fee filter
    filteredItems = filteredItems.filter(
      item => item.price >= tuitionFee
    );

    // Apply sorting
    if (sortBy === 'asc') {
      filteredItems.sort((a, b) => a.name.localeCompare(b.name));
    } else if (sortBy === 'desc') {
      filteredItems.sort((a, b) => b.name.localeCompare(a.name));
    }

    setItems(filteredItems);
  }, [itemsProp, itemsDataStore, locations, tuitionFee, sortBy]);


  const handleLocationChange = e => {
    const { id, checked } = e.target;
    setLocations(prevLocations => {
      if (checked) {
        console.log([...prevLocations, id])
        return [...prevLocations, id];
      } else {
        console.log(prevLocations.filter(location => location !== id))
        return prevLocations.filter(location => location !== id);
      }
    });
  };

  const handleTuitionFeeChange = e => {
    setTuitionFee(parseInt(e.target.value));
  };


  
  return (
    <div>
      <div className='uni__two'>
        <div className='uni__wrap'>
          <div className='sidebar container'>
            <div className='uni__filter'>
                    
              {/* <Filter title='Location' info={
                  <div className='filter__info'>
                      <input type='text' placeholder="Enter state or country"/>
                  </div>
              } /> */}
              
              <div className="sort__container">
              <label htmlFor="sort-select">Sort by:</label>
              <select id="sort-select" value={sortBy} onChange={handleSortChange}>
                <option value="">---</option>
                <option value="asc">A-Z</option>
                <option value="desc">Z-A</option>
              </select>
              </div>

              <Filter title='Region' info={
                  <div>
                  <div className='checkbox__container'>
                      <input id='Europe' type='checkbox' onChange={handleLocationChange}/>
                      <label>Europe</label>
                  </div>
                  <div className='checkbox__container'>
                      <input id='Asia' type='checkbox' onChange={handleLocationChange}/>
                      <label>Asia</label>
                  </div>
                  <div className='checkbox__container'>
                      <input id='West' type='checkbox' onChange={handleLocationChange}/>
                      <label>West</label>
                  </div>
                  <div className='checkbox__container'>
                      <input id='Australia' type='checkbox' onChange={handleLocationChange}/>
                      <label>Australia</label>
                  </div>
                  <div className='checkbox__container'>
                      <input id='South' type='checkbox' onChange={handleLocationChange}/>
                      <label>South</label>
                  </div>
                  </div>
              }/>

              <Filter title='Tuition Fee' info={
                  <div> 
                      <div className='tuition__text'>
                          <div className='tuition__numb'> 
                              <input inputMode='numeric' placeholder='' value={tuitionFee+'$'} readOnly/>
                              <label>Amount</label>
                          </div>

                      </div>
                      <input className='' type='range' min='0' max='50000' onChange={handleTuitionFeeChange}/>
                  </div>
              } />
        
            </div>
          </div>
        </div>

        <div className='container'>        
          <Collection
            type="grid"
            isSearchable="true"
            isPaginated={true}
            searchPlaceholder="Search..."
            itemsPerPage={6}
            templateColumns="1fr 1fr 1fr"
            autoFlow="row"
            alignItems="stretch"
            justifyContent="stretch"
            items={items || []}
            {...getOverrideProps(overrides, "UnisCardCollection")}
            {...rest}
          >
            {(item, index) => (
              <ActionCard
                uniItem={item}
                height="auto"
                width="auto"
                margin="0 0 0 15px"
                key={item.id}
                {...(overrideItems && overrideItems({ item, index }))}
              ></ActionCard>
            )}
          </Collection>
        </div>
      </div>
    </div>
  );
}
